#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('portalnode:server');
const http = require('http');
const models = require('../models');
const {Config, User} = require('../models');
let DefaultSettings = require('../config/DefaultSettings.json');
let DefaultUser = require('../config/DefaultUser.json');

/**
 * Get port from environment and store in Express.
 */

let port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

let server = http.createServer(app);

/**
 * Initialize Socket.io
 */
app.io.attach(server)

/**
 * Listen on provided port, on all network interfaces.
 */

models.sequelize.sync({alter: false}).then(function () {
  /**
   * Listen on provided port, on all network interfaces.
   */
  server.listen(port, function () {
  debug('Express server listening on port ' + server.address().port);
    /**
     * Verify Settings.
     */
    try {
      DefaultSettings.forEach((setting)=>{
        Config.findOne({where: {Setting: setting.Setting}})
            .then((result)=>{
              if (!result){
                Config.create(
                    {
                      "Setting": setting.Setting,
                      "Value": setting.Value,
                      "Description": setting.Description
                    }
                )
              }
            })
      })
    } catch (e) {
      console.error(e)
    }
    /**
     * Add Default User If None Exists.
     */
    try {
      User.count().then(count =>{
        if (count === 0){
          User.create(DefaultUser)
        }
      })
    } catch (e) {
      console.error(e)
    }

});
server.on('error', onError);
server.on('listening', onListening);
});



/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
